# 1. KVM set up
## Firecracker requires read/write access to /dev/kvm exposed by the KVM module.

## The presence of the KVM module can be checked with:

lsmod | grep kvm

## An example output where it is enabled:

kvm_intel             348160  0
kvm                   970752  1 kvm_intel
irqbypass              16384  1 kvm

## Some Linux distributions use the kvm group to manage access to /dev/kvm, while others rely on access control lists. If you have the ACL package for your distro installed, you can grant Read+Write access with:

sudo setfacl -m u:${USER}:rw /dev/kvm

## Otherwise, if access is managed via the kvm group:

[ $(stat -c "%G" /dev/kvm) = kvm ] && sudo usermod -aG kvm ${USER} \
&& echo "Access granted."

# 2. Getting a rootfs and Guest Kernel Image
ARCH="$(uname -m)"

latest=$(wget "http://spec.ccfc.min.s3.amazonaws.com/?prefix=firecracker-ci/v1.9/x86_64/vmlinux-5.10&list-type=2" -O - 2>/dev/null | grep "(?<=<Key>)(firecracker-ci/v1.9/x86_64/vmlinux-5\.10\.[0-9]{3})(?=</Key>)" -o -P)

## Download a linux kernel binary
wget https://s3.amazonaws.com/spec.ccfc.min/${latest} -O vmlinux

## Download a rootfs
wget https://s3.amazonaws.com/spec.ccfc.min/firecracker-ci/v1.9/${ARCH}/ubuntu-22.04.ext4

## Download the ssh key for the rootfs
wget https://s3.amazonaws.com/spec.ccfc.min/firecracker-ci/v1.9/${ARCH}/ubuntu-22.04.id_rsa

## Set user read permission on the ssh key
chmod 400 ./ubuntu-22.04.id_rsa

# 3. Getting a Firecracker Binary
ARCH="$(uname -m)"
release_url="https://github.com/firecracker-microvm/firecracker/releases"
latest=$(basename $(curl -fsSLI -o /dev/null -w  %{url_effective} ${release_url}/latest))
curl -L ${release_url}/download/${latest}/firecracker-${latest}-${ARCH}.tgz \
| tar -xz

## Rename the binary to "firecracker"
mv release-${latest}-$(uname -m)/firecracker-${latest}-${ARCH} firecracker

# 4. Configuring network interface
sudo ./setup_network.sh

# 5. Uruchomienie Firecracker microVM
sudo rm -f /tmp/firecracker1.socket
sudo ./firecracker --api-sock /tmp/firecracker1.socket --config-file vm_config.json

## Configure network interface on microVM
# Skonfiguruj trasę domyślną
ip addr add 172.16.0.2/30 dev eth0
ip route add default via 172.16.0.1 dev eth0

# Skonfiguruj DNS
echo 'nameserver 8.8.8.8' > /etc/resolv.conf

# 6. Checking microVM from host
# checking firecracker processes
ps aux | grep firecracker

# setting tap device to UP mode
sudo ip link set tap0 up
ip link show tap0

# checking microVM-host network traffic
sudo tcpdump -i tap0

# sending file to microVM
scp -vvv -i ./ubuntu-22.04.id_rsa ./python.py root@172.16.0.2:/root/

# ssh to microVM
ssh -i ./ubuntu-22.04.id_rsa root@172.16.0.2 'reboot'

# running sent file in microVM
ssh -i ./ubuntu-22.04.id_rsa root@172.16.0.2 'python3 /root/python.py' > output.txt

./setup_network.sh tap0 172.16.0.1
./setup_network.sh tap1 172.16.1.1
./setup_network.sh tap2 172.16.2.1


./launch_microVM.sh tap0 /tmp/firecracker.socket 172.16.0.2 172.16.0.1 ./ubuntu-22.04.id_rsa python.py CEC2022.py ranking_calculator.py
ssh -i ./ubuntu-22.04.id_rsa -o StrictHostKeyChecking=no root@172.16.0.2 'python3 /root/python.py' > output.txt
ssh -i ./ubuntu-22.04.id_rsa root@172.16.0.2 'reboot'


./launch_microVM.sh tap1 /tmp/firecracker1.socket 172.16.1.2 172.16.1.1 ./ubuntu-22.04.id_rsa python.py
ssh -i ./ubuntu-22.04.id_rsa -o StrictHostKeyChecking=no root@172.16.1.2 'python3 /root/python.py' > output.txt
ssh -i ./ubuntu-22.04.id_rsa root@172.16.1.2 'reboot'


./launch_microVM.sh tap0 /tmp/firecracker.socket 172.16.0.2 172.16.0.1 ./ubuntu-22.04.id_rsa algorithm.py CEC2022.py ranking_calculator.py super_alg cec_data.json > logs.txt

# ./launch_microVM4.sh tap1 /tmp/firecracker1.socket 172.16.1.2 172.16.1.1 ./ubuntu-22.04.id_rsa algorithm.py CEC2022.py ranking_calculator.py super_alg > logs.txt
